{"version":3,"sources":["../../../src/controllers/orbit-controller.js"],"names":["clamp","Vector2","Controller","ViewState","LinearInterpolator","TRANSITION_EVENTS","mod","MOVEMENT_SPEED","DEFAULT_STATE","rotationX","rotationOrbit","zoom","target","minRotationX","maxRotationX","minZoom","Infinity","maxZoom","LINEAR_TRANSITION_PROPS","transitionDuration","transitionEasing","t","transitionInterpolator","transitionInterruption","BREAK","zoom2Scale","Math","pow","OrbitState","constructor","ViewportType","width","height","orbitAxis","startPanPosition","startTarget","startRotationX","startRotationOrbit","startZoomPosition","startZoom","_interactiveState","getViewportProps","_viewportProps","getInteractiveState","panStart","pos","_getUpdatedState","pan","startPos","delta","subtract","_calculateNewTarget","pixelOffset","panEnd","rotateStart","rotate","deltaScaleX","deltaScaleY","Number","isFinite","isRotating","rotateEnd","shortestPathFrom","viewState","fromProps","props","Object","assign","abs","zoomStart","scale","newZoom","_calculateNewZoom","startScale","newScale","dX","dY","zoomEnd","zoomIn","zoomOut","moveLeft","moveRight","moveUp","moveDown","rotateLeft","rotateRight","rotateUp","rotateDown","log2","viewportProps","viewport","center","project","unproject","newProps","_applyConstraints","OrbitController","_getTransitionProps"],"mappings":"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","sourcesContent":["import {clamp, Vector2} from 'math.gl';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport {TRANSITION_EVENTS} from './transition-manager';\nimport {mod} from '../utils/math-utils';\n\nconst MOVEMENT_SPEED = 50; // per keyboard click\n\nconst DEFAULT_STATE = {\n  rotationX: 0,\n  rotationOrbit: 0,\n  zoom: 0,\n  target: [0, 0, 0],\n  minRotationX: -90,\n  maxRotationX: 90,\n  minZoom: -Infinity,\n  maxZoom: Infinity\n};\n\nconst LINEAR_TRANSITION_PROPS = {\n  transitionDuration: 300,\n  transitionEasing: t => t,\n  transitionInterpolator: new LinearInterpolator(['target', 'zoom', 'rotationX', 'rotationOrbit']),\n  transitionInterruption: TRANSITION_EVENTS.BREAK\n};\n\n/* Helpers */\n\nconst zoom2Scale = zoom => Math.pow(2, zoom);\n\nexport class OrbitState extends ViewState {\n  constructor({\n    ViewportType,\n\n    /* Viewport arguments */\n    width, // Width of viewport\n    height, // Height of viewport\n    orbitAxis,\n    rotationX = DEFAULT_STATE.rotationX, // Rotation around x axis\n    rotationOrbit = DEFAULT_STATE.rotationOrbit, // Rotation around orbit axis\n    target = DEFAULT_STATE.target,\n    zoom = DEFAULT_STATE.zoom,\n\n    /* Viewport constraints */\n    minRotationX = DEFAULT_STATE.minRotationX,\n    maxRotationX = DEFAULT_STATE.maxRotationX,\n    minZoom = DEFAULT_STATE.minZoom,\n    maxZoom = DEFAULT_STATE.maxZoom,\n\n    /** Interaction states, required to calculate change during transform */\n    // Model state when the pan operation first started\n    startPanPosition,\n    startTarget,\n    // Model state when the rotate operation first started\n    startRotationX,\n    startRotationOrbit,\n    // Model state when the zoom operation first started\n    startZoomPosition,\n    startZoom\n  }) {\n    super({\n      width,\n      height,\n      orbitAxis,\n      rotationX,\n      rotationOrbit,\n      target,\n      zoom,\n      minRotationX,\n      maxRotationX,\n      minZoom,\n      maxZoom\n    });\n\n    this._interactiveState = {\n      startPanPosition,\n      startTarget,\n      startRotationX,\n      startRotationOrbit,\n      startZoomPosition,\n      startZoom\n    };\n\n    this.ViewportType = ViewportType;\n  }\n\n  /* Public API */\n\n  getViewportProps() {\n    return this._viewportProps;\n  }\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}) {\n    const {target} = this._viewportProps;\n\n    return this._getUpdatedState({\n      startPanPosition: pos,\n      startTarget: target\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan({pos, startPos}) {\n    const {startPanPosition, startTarget} = this._interactiveState;\n    const delta = new Vector2(pos).subtract(startPanPosition);\n\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({startTarget, pixelOffset: delta})\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedState({\n      startPanPosition: null,\n      startTarget: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}) {\n    return this._getUpdatedState({\n      startRotationX: this._viewportProps.rotationX,\n      startRotationOrbit: this._viewportProps.rotationOrbit\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({deltaScaleX, deltaScaleY}) {\n    const {startRotationX, startRotationOrbit} = this._interactiveState;\n\n    if (!Number.isFinite(startRotationX) || !Number.isFinite(startRotationOrbit)) {\n      return this;\n    }\n    if (startRotationX < -90 || startRotationX > 90) {\n      // When looking at the \"back\" side of the scene, invert horizontal drag\n      // so that the camera movement follows user input\n      deltaScaleX *= -1;\n    }\n\n    return this._getUpdatedState({\n      rotationX: startRotationX + deltaScaleY * 180,\n      rotationOrbit: startRotationOrbit + deltaScaleX * 180,\n      isRotating: true\n    });\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedState({\n      startRotationX: null,\n      startRotationOrbit: null\n    });\n  }\n\n  // shortest path between two view states\n  shortestPathFrom(viewState) {\n    const fromProps = viewState.getViewportProps();\n    const props = Object.assign({}, this._viewportProps);\n    const {rotationOrbit} = props;\n\n    if (Math.abs(rotationOrbit - fromProps.rotationOrbit) > 180) {\n      props.rotationOrbit = rotationOrbit < 0 ? rotationOrbit + 360 : rotationOrbit - 360;\n    }\n\n    return props;\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart({pos}) {\n    return this._getUpdatedState({\n      startZoomPosition: pos,\n      startTarget: this._viewportProps.target,\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current target is\n   * @param {[Number, Number]} startPos - the target position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale}) {\n    const {zoom, width, height, target} = this._viewportProps;\n    let {startZoom, startZoomPosition, startTarget} = this._interactiveState;\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = zoom;\n      startTarget = target;\n      startZoomPosition = startPos || pos;\n    }\n\n    const newZoom = this._calculateNewZoom({scale, startZoom});\n    const startScale = zoom2Scale(startZoom);\n    const newScale = zoom2Scale(newZoom);\n\n    const dX = (width / 2 - startZoomPosition[0]) * (newScale / startScale - 1);\n    const dY = (height / 2 - startZoomPosition[1]) * (newScale / startScale - 1);\n\n    return this._getUpdatedState({\n      zoom: newZoom,\n      target: this._calculateNewTarget({startTarget, zoom: newZoom, pixelOffset: [dX, dY]})\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomPosition: null,\n      startTarget: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn() {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: 2})\n    });\n  }\n\n  zoomOut() {\n    return this._getUpdatedState({\n      zoom: this._calculateNewZoom({scale: 0.5})\n    });\n  }\n\n  moveLeft() {\n    const pixelOffset = [-MOVEMENT_SPEED, 0];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  moveRight() {\n    const pixelOffset = [MOVEMENT_SPEED, 0];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  moveUp() {\n    const pixelOffset = [0, -MOVEMENT_SPEED];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  moveDown() {\n    const pixelOffset = [0, MOVEMENT_SPEED];\n    return this._getUpdatedState({\n      target: this._calculateNewTarget({pixelOffset})\n    });\n  }\n\n  rotateLeft() {\n    return this._getUpdatedState({\n      rotationOrbit: this._viewportProps.rotationOrbit - 15\n    });\n  }\n\n  rotateRight() {\n    return this._getUpdatedState({\n      rotationOrbit: this._viewportProps.rotationOrbit + 15\n    });\n  }\n\n  rotateUp() {\n    return this._getUpdatedState({\n      rotationX: this._viewportProps.rotationX - 10\n    });\n  }\n\n  rotateDown() {\n    return this._getUpdatedState({\n      rotationX: this._viewportProps.rotationX + 10\n    });\n  }\n\n  /* Private methods */\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this._viewportProps;\n    if (!Number.isFinite(startZoom)) {\n      startZoom = this._viewportProps.zoom;\n    }\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  _calculateNewTarget({startTarget, zoom, pixelOffset}) {\n    const viewportProps = Object.assign({}, this._viewportProps);\n    if (Number.isFinite(zoom)) {\n      viewportProps.zoom = zoom;\n    }\n    if (startTarget) {\n      viewportProps.target = startTarget;\n    }\n    const viewport = new this.ViewportType(viewportProps);\n    const center = viewport.project(viewportProps.target);\n    return viewport.unproject([center[0] - pixelOffset[0], center[1] - pixelOffset[1], center[2]]);\n  }\n\n  _getUpdatedState(newProps) {\n    // Update _viewportProps\n    return new OrbitState(Object.assign({}, this._viewportProps, this._interactiveState, newProps));\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props) {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom, maxRotationX, minRotationX, rotationOrbit} = props;\n\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n    props.rotationX = clamp(props.rotationX, minRotationX, maxRotationX);\n    if (rotationOrbit < -180 || rotationOrbit > 180) {\n      props.rotationOrbit = mod(rotationOrbit + 180, 360) - 180;\n    }\n\n    return props;\n  }\n}\n\nexport default class OrbitController extends Controller {\n  constructor(props) {\n    super(OrbitState, props);\n  }\n\n  _getTransitionProps() {\n    // Enables Transitions on double-tap and key-down events.\n    return LINEAR_TRANSITION_PROPS;\n  }\n}\n"],"file":"orbit-controller.js"}